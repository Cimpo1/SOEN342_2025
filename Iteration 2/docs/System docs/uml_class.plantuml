@startuml Class Diagram
skinparam DefaultFontName Arial
skinparam DefaultFontSize 16
skinparam DefaultFontStyle bold
skinparam ArrowThickness 2.2
title UML Class Diagram
hide empty members

class "Terminal" as terminal {
    - /results : HashSet<Connection>
    - /currTripID : String
    - /selectedConnectionID : String
    - input : Scanner
    - sortToggle : int
    + accessTerminal() : void
    + searchConnections(String departure, String arrival, String day, String depTime, String arrTime, String trainType, String firstRate, String secondRate) : void
    + setResults(HashSet<Connection> results) : void
    + selectSort(String choice) : void
    + displayResults() : void
    + displayMenu() : void
    + displaySortResults() : void
    + displayEnd() : void
    + end() : void
    + startTripBooking() : void
    + addReservation(String firstName, String lastName, int age, int id) : void
    + endTripBooking() : void
    + searchTrips() : void
    + viewHistoryCollection() : void
    + selectConnection() : void
}
class "DBRoutes" as DBRoutes {
    - map : HashSet<Routes>
    + addRoutes(Routes r) : void
    + changeSet(HashSet<Routes> set) : void
    + getRoutes() : HashSet<Routes>
    + validateRoutes(Routes r) : boolean
    + getRouteByID(String routeID) : Routes
    + getRoutesByCityDep(String cityName) : HashSet<Routes>
    + getRoutesByCityArr(String cityName) : HashSet<Routes>
}

class "DBConnection" as DBConnection {
    - map : HashMap<Cities, ArrayList<Connection>>
    + addConnection(Connection conn) : void
    + getConnection(Cities city) : ArrayList<Connection>
    + validateConnection(Cities departure, Cities destination) : boolean
    + getAllConnections() : ArrayList<Connection>
    + getDirectConnections(Cities depCity, Cities arrCity, String day, String depTime, String arrTime, String trainType, String firstRate, String secondRate) : HashSet<Connection>
    + getIndirectConnections(Cities depCity, Cities arrCity, String day, String depTime, String arrTime, String trainType, String firstRate, String secondRate) : HashSet<Connection>
    + getConnectionById(String id) : Connection
}

class "DBCities" as DBCities {
    - cityMap : HashMap<String, Cities>
    + addCity(Cities city) : void
    + validateCities(String departure, String destination) : boolean
    + getCityByName(String name) : Cities
    + getAllCityNames() : String[]
}

class "Routes" as routes {
    - routeID : String
    - tripDuration : Duration
    - departureDateTime : LocalTime
    - arrivalDateTime : LocalTime
    - traintype : String
    - daysofoperation : ArrayList<String>
    - firstClassPrice : Integer
    - secondClassPrice : Integer
    +getRouteID() : String
    +getDepartureCity() : Cities
    +getArrivalCity() : Cities
    +getTripDuration() : Duration
    +getDepartureDateTime() : LocalTime
    +getArrivalDateTime() : LocalTime
    +getTraintype() : String
    +getDaysofoperation() : ArrayList<String>
    +getFirstClassPrice() : Integer
    +getSecondClassPrice() : Integer
}
 
class "Connection" as connection {
    - id : String
    - tripDuration : Duration
    - qtyStops : Integer
    - firstClassPrice : Integer
    - secondClassPrice : Integer
    - daysofoperation : ArrayList<String>
    +getDepartureCity() : Cities
    +getArrivalCity() : Cities
    +getTripDuration() : Duration
    +getQtyStops() : Integer
    +getStopCities() : ArrayList<Cities>
    +getDaysofoperation() : ArrayList<String>
    +getFirstClassPrice() : Integer
    +getSecondClassPrice() : Integer
    +getRoutes() : ArrayList<Routes>
    +addStopCity(Cities city) : void
}
class "Cities" as cities {
    - name: String
    +getName() : String
}
class "DBClient" as DBClient {
    + addClient(Client client) : void
    + addClient(String firstName, String lastName, int age, int id) : void
    + getClientByIdAndLName(int id, String lname) : Client
    - find(Client client) : Client
    + addTripToClient(Client client, Trip trip) : void
    +getTripsByClient(Client client) : HashSet<Trip>
}
class "Client" as client {
    - id : String
    - firstName : String
    - lastName : String
    - age : Integer
}
class "DBTrip" as DBTrip {
    + getTrips() : HashSet<Trip> 
    + addTrip(Trip trip) : void
    + addTrip() : Trip
}
class "Trip" as trip {
    - id : String
    - departureTime : LocalTime
    + getId() : String
    + getReservations() : HashSet<Reservation>
    + addReservation(Reservation reservation) : void
    + getDepartureTime() : LocalTime
}
class "DBReservation" as DBReservation {
    + getReservations() : HashSet<Reservation>
    + addReservation(Reservation reservation) : void
    + addReservation(Client client, Connection connection) : Reservation
    - find(Reservation reservation) : Reservation
    + setTicketForReservation(Reservation reservation, Ticket ticket)
}
class "Reservation" as reservation {
    - id : String
}
class "DBTicket" as DBTicket {
    + getTickets() : HashSet<Ticket>
    + getTicketByReservation(Reservation reservation) : Ticket
    + getTicketById(String id) : Ticket
    + generateTicket(Reservation reservation) : Ticket
}
class "Ticket" as ticket {
    - id : String
    + getId() : String
    + getReservation() : Reservation
}

class "PopulateDB" as populateDB {
    populateDatabase(String csvFilePath) : void
    - parseCSVLine(String line) : String[]
    + getDbCities() : DBCities
    + getDbConnection() : DBConnection
    + getDbRoutes() : DBRoutes
}

connection"*" <-up- DBConnection : "contains"
cities" *   "  <-up-  DBCities : "contains"
routes " *  " <-up-  DBRoutes : "contains"
DBClient  -down-> "* " client : "contains"
DBTrip    -down-> "* " trip : "contains"
DBReservation -down-> "* " reservation : "contains"
DBTicket  -down-> "* " ticket : "contains"
terminal -- populateDB : "accesses"
DBConnection  -[hidden]> DBCities: "acces             ses"
DBCities  -[hidden]> DBRoutes: "acces             ses"
DBClient -[hidden]> DBConnection: "accesses"
DBReservation -[hidden]> DBTrip: "accesses"
DBTrip -[hidden]> DBClient: "accesses"
DBTicket -[hidden]> DBTrip: "accesses"


routes"1..3   "  <-left- "1"connection : "has"

connection "1 departureCity" -[hidden]-> "1" cities: "acces                    ses"
cities "1 departureCity" -left-> "1" connection
note "For clarity:\n1 arrivalCity -> 1 connection.\n1 departureCity -> 1 connection.\n1..2 stopCities -> 1 connection." as N2
cities .. N2
N2 .. connection
connection "1 departureCity" -[hidden]-> "1" cities: "acces   sssssssss                 ses"
cities "1 arrivalCity" -left-> "1" connection
cities "1..2 stopCities" -left-> "1" connection


cities "1 departureCity" -[hidden]-> "1" routes: "acces                    ses"
cities "1 departureCity" -right-> "1" routes
cities "1 departureCity" -[hidden]-> "1" routes: "acces                    ses"
cities "1 arrivalCity" -right-> "1" routes

DBRoutes  <-up-  terminal : "accesses"

DBCities  <-up-  terminal : "accesses"

DBConnection  <-up-  terminal : "accesses"

DBClient  <-up- terminal : "accesses"

DBTrip  <-up- terminal : "accesses"

DBReservation  <-up- terminal : "accesses"

DBTicket  <-up- terminal : "accesses"

reservation "1" --> "1" ticket : "documented by"

reservation "1" --> "  1" connection : "for"

trip "1" --> "1..*   " reservation : "includes"

client "*" --> "*" trip : "book"

client "1" --> "1" reservation : "has"


@enduml